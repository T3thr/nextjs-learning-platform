"use client";

import React, { useState } from 'react';
import { useProgress } from '@/context/ProgressContext';
import CodeBlock from './CodeBlock';

interface CodeEditorProps {
  starterCode: string;
  solutionCode: string;
  testCases?: string;
  onSubmit?: (code: string, isCorrect: boolean) => void;
}

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
export default function CodeEditor({
  starterCode,
  solutionCode,
  testCases,
  onSubmit,
}: CodeEditorProps) {
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [code, setCode] = useState(starterCode);
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  const [testResult, setTestResult] = useState<{
    success: boolean;
    message: string;
  } | null>(null);
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏â‡∏•‡∏¢
  const [showSolution, setShowSolution] = useState(false);
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [isRunning, setIsRunning] = useState(false);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  const runCode = () => {
    setIsRunning(true);
    setTestResult(null);
    
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î (‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ API ‡∏´‡∏£‡∏∑‡∏≠ Web Worker)
    setTimeout(() => {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isCorrect = code.includes('return') && code.length > starterCode.length;
        
        if (isCorrect) {
          setTestResult({
            success: true,
            message: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! üéâ',
          });
          
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
          if (onSubmit) {
            onSubmit(code, true);
          }
        } else {
          setTestResult({
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          });
          
          if (onSubmit) {
            onSubmit(code, false);
          }
        }
      } catch (error) {
        setTestResult({
          success: false,
          message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`,
        });
      } finally {
        setIsRunning(false);
      }
    }, 1000);
  };

  return (
    <div className="border border-text-secondary/20 rounded-lg overflow-hidden">
      {/* ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ */}
      <div className="bg-surface p-2 flex justify-between items-center border-b border-text-secondary/20">
        <span className="font-mono text-sm">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î</span>
        <div className="flex space-x-2">
          <button
            onClick={runCode}
            disabled={isRunning}
            className="btn btn-primary btn-sm"
          >
            {isRunning ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...
              </>
            ) : (
              <>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 mr-1">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.348a1.125 1.125 0 010 1.971l-11.54 6.347a1.125 1.125 0 01-1.667-.985V5.653z" />
                </svg>
                ‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
              </>
            )}
          </button>
          <button
            onClick={() => setShowSolution(!showSolution)}
            className="btn btn-secondary btn-sm"
          >
            {showSolution ? '‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏¢' : '‡∏î‡∏π‡πÄ‡∏â‡∏•‡∏¢'}
          </button>
        </div>
      </div>
      
      {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î */}
      <div className="p-4 bg-background">
        <textarea
          value={code}
          onChange={(e) => setCode(e.target.value)}
          className="w-full h-64 font-mono text-sm p-4 bg-surface border border-text-secondary/20 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
          spellCheck="false"
        />
      </div>
      
      {/* ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö */}
      {testResult && (
        <div className={`p-4 ${testResult.success ? 'bg-green-100 dark:bg-green-900' : 'bg-red-100 dark:bg-red-900'}`}>
          <h3 className={`font-bold ${testResult.success ? 'text-green-800 dark:text-green-200' : 'text-red-800 dark:text-red-200'}`}>
            {testResult.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}
          </h3>
          <p className={`mt-1 ${testResult.success ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'}`}>
            {testResult.message}
          </p>
        </div>
      )}
      
      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏•‡∏¢ */}
      {showSolution && (
        <div className="p-4 bg-yellow-50 dark:bg-yellow-900/30">
          <h3 className="font-bold text-yellow-800 dark:text-yellow-200 mb-2">‡πÄ‡∏â‡∏•‡∏¢</h3>
          <CodeBlock
            code={solutionCode}
            language="typescript"
            fileName="solution.tsx"
          />
        </div>
      )}
    </div>
  );
}
