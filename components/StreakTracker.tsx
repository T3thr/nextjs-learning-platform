"use client";

import React, { useState, useEffect } from "react";
import { useProgress } from "@/context/ProgressContext";
import { useAuth } from "@/context/AuthContext";
import Link from "next/link";

interface StreakTrackerProps {
  userId?: string;
}

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
export default function StreakTracker({ userId: propUserId }: StreakTrackerProps) {
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
  const [streak, setStreak] = useState({
    currentStreak: 0,
    longestStreak: 0,
    lastActive: null as Date | null,
    activeDays: [] as string[],
  });

  // ‡πÉ‡∏ä‡πâ context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
  const { progress } = useProgress();
  const { session, status } = useAuth();

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const today = new Date().toISOString().split("T")[0];

  // ‡πÉ‡∏ä‡πâ userId ‡∏à‡∏≤‡∏Å props ‡∏´‡∏£‡∏∑‡∏≠ session
  const userId = propUserId || (session?.user?.id as string);

  // ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
  useEffect(() => {
    if (status !== "authenticated" || !userId) return;

    const fetchStreak = async () => {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å API
        const response = await fetch(`/api/streaks/${userId}`);
        if (response.ok) {
          const data = await response.json();
          setStreak({
            currentStreak: data.currentStreak,
            longestStreak: data.longestStreak,
            lastActive: data.lastActive ? new Date(data.lastActive) : null,
            activeDays: data.activeDays,
          });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasActivityToday = progress.lessons.some(
          (lesson: { completedAt: { toISOString: () => string; }; }) => lesson.completedAt && lesson.completedAt.toISOString().split("T")[0] === today
        ) || progress.exercises.some(
          (exercise: { completedAt: { toISOString: () => string; }; }) => exercise.completedAt && exercise.completedAt.toISOString().split("T")[0] === today
        );

        if (hasActivityToday) {
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï streak ‡∏ú‡πà‡∏≤‡∏ô API
          await fetch(`/api/streaks/${userId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ hasActivityToday: true }),
          });
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          const updatedResponse = await fetch(`/api/streaks/${userId}`);
          if (updatedResponse.ok) {
            const updatedData = await updatedResponse.json();
            setStreak({
              currentStreak: updatedData.currentStreak,
              longestStreak: updatedData.longestStreak,
              lastActive: updatedData.lastActive ? new Date(updatedData.lastActive) : null,
              activeDays: updatedData.activeDays,
            });
          }
        }
      } catch (error) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á:", error);
      }
    };

    fetchStreak();
  }, [progress.lessons, progress.exercises, today, userId, status]);

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  if (status !== "authenticated" || !userId) {
    return (
      <div className="bg-surface p-6 rounded-lg border border-text-secondary/10">
        <h3 className="font-bold text-lg mb-4">‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</h3>
        <p className="text-sm text-center">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</p>
      </div>
    );
  }

  return (
    <div className="bg-surface p-6 rounded-lg border border-text-secondary/10">
      <h3 className="font-bold text-lg mb-4">‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</h3>

      <div className="grid grid-cols-2 gap-4">
        <div className="text-center p-4 bg-background rounded-lg">
          <div className="text-3xl font-bold text-primary">{streak.currentStreak}</div>
          <div className="text-sm text-text-secondary">‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</div>
        </div>

        <div className="text-center p-4 bg-background rounded-lg">
          <div className="text-3xl font-bold text-primary">{streak.longestStreak}</div>
          <div className="text-sm text-text-secondary">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
        </div>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå */}
      <div className="mt-4">
        <div className="text-sm text-text-secondary mb-2">7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</div>
        <div className="flex justify-between">
          {Array.from({ length: 7 }).map((_, index) => {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            const date = new Date();
            date.setDate(date.getDate() - (6 - index));
            const dateStr = date.toISOString().split("T")[0];

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const isActive = streak.activeDays.includes(dateStr);

            // ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            const dayNames = ["‡∏≠‡∏≤", "‡∏à", "‡∏≠", "‡∏û", "‡∏û‡∏§", "‡∏®", "‡∏™"];
            const dayName = dayNames[date.getDay()];

            return (
              <div key={index} className="flex flex-col items-center">
                <div className="text-xs text-text-secondary mb-1">{dayName}</div>
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    isActive
                      ? "bg-primary text-white"
                      : "bg-background border border-text-secondary/20"
                  }`}
                >
                  {date.getDate()}
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô */}
      <div className="mt-6 text-center">
        {streak.currentStreak > 0 ? (
          <p className="text-sm">
            ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß {streak.currentStreak} ‡∏ß‡∏±‡∏ô üî•
          </p>
        ) : (
          <p className="text-sm">
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á! üöÄ
          </p>
        )}
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô */}
      <div className="mt-4">
        <Link
          href="/lessons"
          className="block w-full text-center py-2 px-4 bg-primary text-white rounded-md hover:bg-primary/90 transition-colors"
        >
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠
        </Link>
      </div>
    </div>
  );
}